#: import GLShaderLexer pygments.lexers.GLShaderLexer

# -----------------------
# MAIN DISPLAY
# -----------------------
<MainDisplay>:
    id: maindisplay_id

    # Primary Display of Camera Results
    ShaderViewer:
        id: viewer_id
        size_hint: None, None
        size: root.width, root.height
        pos: 0, 0

    ShaderEditor:
        viewer: viewer_id
        size_hint: None, None
        size: 300, root.height
        pos: -285, 0

    MainSettings:
        id: mainsettings_id
        size_hint: None, None
        size: 300, root.height
        pos: root.width-15, 0

    # Camera Controls
    # ------------------------------
    BoxLayout:
        orientation: 'horizontal'
        padding: 5
        spacing: 5
        size_hint: None, None
        size: 300, 40
        pos: root.width/2-200, 0
        ToggleButton:
            id: live_btn
            size_hint_x: None
            width: 100
            text: 'Freeze'
            state: 'normal'
            on_press: root.cam_toggle()
        Button:
            id: capture_btn
            size_hint_x: None
            width: 100
            text: 'Capture'
            on_press: root.capture(0)
        Button:
            id: composite_btn
            size_hint_x: None
            width: 100
            text: 'Composite'
            on_press: root.composite(0)
        Button:
            id: fit_btn
            size_hint_x: None
            width: 50
            text: 'Fit'
            on_press: root.fit_image()
        Button:
            id: one2one_btn
            size_hint_x: None
            width: 50
            text: '1:1'
            on_press: root.one2one_image()

# ShaderViewer - Shaded Live Camera view
# ------------------------------------------
<ShaderViewer>:
    PylonCamera:
        id: microscope_camera
        resolution: (2592, 1944)
        allow_stretch: True
        keep_ratio: True

# ShaderEditor - view and edit shader code
# ------------------------------------------
<ShaderEditor>:
    orientation: 'horizontal'
    BoxLayout:
        orientation: 'vertical'
        # Fragment Shader Editor
        Label:
            text: 'Fragment Shader'
            size_hint_y: None
            height: self.texture_size[1] + 10
        CodeInput:
            text: root.fs
            lexer: GLShaderLexer()
            on_text: root.fs = args[1]

        # Vertex Shader Editor
        Label:
            text: 'Vertex Shader'
            size_hint_y: None
            height: self.texture_size[1] + 10
        CodeInput:
            text: root.vs
            lexer: GLShaderLexer()
            on_text: root.vs = args[1]
    ToggleButton:
        id: toggle_editor
        size_hint: None, None
        size: 15, 50
        pos_hint: {"x":0, "y":0.5}
        background_normal: './data/right_arrow.png'
        background_down: './data/left_arrow.png'
        on_press: root.toggle_editor()

# MainSettings - view and edit control accordian
# ------------------------------------------
<MainSettings>:
    orientation: 'horizontal'
    ToggleButton:
        id: toggle_mainsettings
        size_hint: None, None
        size: 15, 50
        pos_hint: {"x":0, "y":0.5}
        background_normal: './data/left_arrow.png'
        background_down: './data/right_arrow.png'
        on_press: root.toggle_settings()

    Accordion:
        orientation: 'vertical'
        # MICROSCOPE SETTINGS
        AccordionItem:
            title: 'Microscope Settings'
            MicroscopeSettings:
                id: microscope_settings_id

        # BRIGHTFIELD SETTINGS
        AccordionItem:
            title: 'Brightfield Control'
            valign: 'top'
            LayerControl:
                id: BF
                layer: 'BF'
                bg_color: 0.3, 0.3, 0.3,  1

        # BLUE SETTINGS
        AccordionItem:
            title: 'Blue Layer Control'
            LayerControl:
                id: Blue
                layer: 'Blue'
                bg_color: 0, .5, 1, 1

        # GREEN SETTINGS
        AccordionItem:
            title: 'Green Layer Control'
            LayerControl:
                id: Green
                layer: 'Green'
                bg_color: .2, 0.8, 0.2, 1

        # RED SETTINGS
        AccordionItem:
            title: 'Red Layer Control'
            LayerControl:
                id: Red
                layer: 'Red'
                bg_color: 1, 0.2, 0, 1

        # TIME LAPSE SETTINGS
        AccordionItem:
            title: 'Time Lapse Settings'
            TimeLapseSettings:
                id: time_lapse_id

# MicroscopeSettings - Settings for  Microscope within MainSettings
# ------------------------------------------
<MicroscopeSettings>:
    padding: 5
    spacing: 5
    orientation: 'vertical'
    canvas:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.7
        Rectangle:
            size: self.size
            pos: self.pos
    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        Label:
            text: 'Lumascope Model'
            size_hint_x: None
            width: 140
        Button:
            id: select_scope_btn
            text: 'Select Scope'
            on_release: microscope_select.open(self)
        DropDown:
            id: microscope_select
            on_select: root.microscope_select(args[1])
            Button:
                id: LS460_btn
                text: 'LS460'
                size_hint_y: None
                height: 40
                on_release: microscope_select.select('LS460')
            Button:
                id: LS560_btn
                text: 'LS560'
                size_hint_y: None
                height: 40
                on_release: microscope_select.select('LS560')
            Button:
                id: LS620_btn
                text: 'LS620'
                size_hint_y: None
                height: 40
                on_release: microscope_select.select('LS620')
            Button:
                id: LS720_btn
                text: 'LS720'
                size_hint_y: None
                height: 40
                on_release: microscope_select.select('LS720')


    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        Label:
            text: 'Objective'
            size_hint_x: None
            width: 140
        Button:
            id: select_obj_btn
            text: 'Select Objective'
            on_release: objective_select.open(self)
        DropDown:
            id: objective_select
            on_select: root.objective_select(args[1])
            Button:
                id: LS460_btn
                text: 'Objective A'
                size_hint_y: None
                height: 40
                on_release: objective_select.select('A')
            Button:
                id: LS560_btn
                text: 'Objective B'
                size_hint_y: None
                height: 40
                on_release: objective_select.select('B')
            Button:
                id: LS620_btn
                text: 'Objective C'
                size_hint_y: None
                height: 40
                on_release: objective_select.select('C')
            Button:
                id: LS720_btn
                text: 'Objective D'
                size_hint_y: None
                height: 40
                on_release: objective_select.select('D')




    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        Label:
            text: 'Frame Size'
            size_hint_x: None
            width: 140
        TextInput:
            id: frame_width
            multiline: False
            padding: [10, (self.height-self.line_height)/2]
            halign: 'left'
            input_filter: 'int'
            text: '2592'
            on_text_validate: root.frame_size()
        Label:
            text: 'x'
            size_hint_x: None
            width: 20
        TextInput:
            id: frame_height
            multiline: False
            padding: [10, (self.height-self.line_height)/2]
            halign: 'left'
            input_filter: 'int'
            text: '1944'
            on_text_validate: root.frame_size()
    Image:
        id: image_of_microscope
        source: './data/LS620.png'

# LayerControl - Settings for Layers within MainSettings
# ------------------------------------------
<LayerControl>:
    padding: 5
    orientation: 'vertical'
    canvas:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.7
        Rectangle:
            size: self.size
            pos: self.pos

    BoxLayout:
        orientation: 'vertical'
        size_hint_y: None
        height: 280
        spacing: 10
        # Illumination
        BoxLayout:
            orientation: 'horizontal'
            Label:
                text: 'Illumination'
                halign: 'center'
                valign: 'middle'
                size_hint_x: None
                width: 100
            Slider:
                id: ill_slider
                min: 0
                max: 1.
                value: 0
                cursor_size: 20,20
                cursor_image: './data/slider_cursor.png'
                value_track: True
                value_track_color: root.bg_color
                on_value: root.ill_slider()
            TextInput:
                id: ill_text
                size_hint_x: None
                width: 50
                multiline: False
                font_size: 14
                padding: [10, (self.height-self.line_height)/2]
                halign: 'left'
                # background_color: 0.6, 0.6, 0.6, 1
                input_filter: 'float'
                text:"%.2f" % ill_slider.value
                on_text: root.ill_text()
        # Gain
        BoxLayout:
            orientation: 'horizontal'
            Label:
                text: 'Gain'
                halign: 'center'
                valign: 'middle'
                size_hint_x: None
                width: 100
            Slider:
                id: gain_slider
                min: 0
                max: 1.
                value: 1.
                cursor_size: 20,20
                cursor_image: './data/slider_cursor.png'
                value_track: True
                value_track_color: root.bg_color
                on_value: root.gain_slider()
            TextInput:
                id: gain_text
                size_hint_x: None
                width: 50
                multiline: False
                font_size: 14
                padding: [10, (self.height-self.line_height)/2]
                halign: 'left'
                # background_color: 0.6, 0.6, 0.6, 1
                input_filter: 'float'
                text:"%.2f" % gain_slider.value
                on_text: root.gain_text()
        # Exposure
        BoxLayout:
            orientation: 'horizontal'
            Label:
                text: 'Exposure'
                halign: 'center'
                size_hint_x: None
                width: 100
            Slider:
                id: exp_slider
                min: 1
                max: 10
                value: 5
                cursor_size: 20,20
                cursor_image: './data/slider_cursor.png'
                value_track: True
                value_track_color: root.bg_color
                on_value: root.exp_slider()
            TextInput:
                id: exp_text
                size_hint_x: None
                width: 50
                multiline: False
                font_size: 14
                padding: [10, (self.height-self.line_height)/2]
                halign: 'left'
                # background_color: 0.6, 0.6, 0.6, 1
                input_filter: 'float'
                text: str(int(exp_slider.value))
                on_text: root.exp_text()
        # LED Warmup Settongs
        BoxLayout:
            orientation: 'horizontal'
            Label:
                text: 'LED Warmup'
                halign: 'center'
                size_hint_x: None
                width: 100
            Slider:
                id: led_slider
                min: 0
                max: 50
                value: 50
                cursor_size: 20,20
                cursor_image: './data/slider_cursor.png'
                value_track: True
                value_track_color: root.bg_color
                on_value: root.led_slider()
            TextInput:
                id: led_text
                size_hint_x: None
                width: 50
                multiline: False
                font_size: 14
                padding: [10, (self.height-self.line_height)/2]
                halign: 'left'
                # background_color: 0.6, 0.6, 0.6, 1
                input_filter: 'float'
                text: str(int(led_slider.value))
                on_text: root.led_text()
        # File Save Settings
        Button:
            id: folder_btn
            text: 'Folder'
            on_press: root.choose_folder()
        TextInput:
            id: root_text
            multiline: False
            text: 'File Root'
            padding: [10, (self.height-self.line_height)/2]
            on_text: root.root_text()
        # LED Include settings
        BoxLayout:
            orientation: 'horizontal'
            Label:
                size_hint_x: None
                width: 50
                text: 'LED'
            Switch:
                id: led_switch
                # on_press: root.led_switch()
                active: False
            Label:
                size_hint_x: None
                width: 80
                text: 'Acquire'
                halign: 'center'
                valign: 'middle'
            CheckBox:
                id: acquire
                size_hint_x:None
                width: 30
                active: True
                on_press: root.update_acquire()
    BoxLayout:
        orientation: 'vertical'

# TimeLapseSettings - Settings for Time Lapse within MainSettings
# ------------------------------------------
<TimeLapseSettings>:
    padding: 5
    spacing: 5
    orientation: 'vertical'
    canvas:
        Color:
            rgba: 0.1, 0.1, 0.1, 0.7
        Rectangle:
            size: self.size
            pos: self.pos

    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        Label:
            text: 'Capture Period'
            size_hint_x: None
            width: 150
        TextInput:
            id: capture_period
            multiline: False
            padding: [10, (self.height-self.line_height)/2]
            halign: 'right'
            input_filter: 'float'
            text: '5'
            on_text: root.update_period()
        Label:
            text: 'min'
            size_hint_x: None
            width: 75

    BoxLayout:
        orientation: 'horizontal'
        size_hint_y: None
        height: 40
        Label:
            text: 'Capture Duration'
            size_hint_x: None
            width: 150
        TextInput:
            id: capture_dur
            multiline: False
            padding: [10, (self.height-self.line_height)/2]
            halign: 'right'
            input_filter: 'float'
            text: '48'
            on_text: root.update_duration()
        Label:
            text: 'hrs'
            size_hint_x: None
            width: 75
    Button:
        text: 'Load Protocol'
        size_hint_y: None
        height: 40
        on_press: root.load_protocol()
    Button:
        text: 'Save Protocol'
        size_hint_y: None
        height: 40
        on_press: root.save_protocol()
    ToggleButton:
        id: record_btn
        text: 'Record'
        size_hint_y: None
        height: 40
        on_press: root.run_protocol()
    Button:
        id: movie_btn
        size_hint_y: None
        height: 40
        text: 'Convert to AVI'
        on_release: root.convert_to_avi()
    BoxLayout:

<LoadDialog>:
    BoxLayout:
        size: root.size
        pos: root.pos
        orientation: "vertical"
        FileChooserListView:
            id: filechooser
            path: '.\\'
        BoxLayout:
            size_hint_y: None
            height: 40
            Button:
                text: "Cancel"
                on_release: root.cancel()
            Button:
                text: "Select"
                on_release: root.load(filechooser.path)
